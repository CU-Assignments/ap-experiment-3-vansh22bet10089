/*
 * Author: Vansh
 * UID: 22BT10089
 * Problem: Merge Two Sorted Linked Lists 
 */
Aim:Operating System-Based Question:
This experiment combines data structures and operating system concepts, focusing on Linked Lists and OS-related problems.
Objective: To implement and analyze Linked Lists in C++, demonstrating operations such as insertion, traversal, and memory management, while integrating concepts from Operating Systems like dynamic memory allocation and efficient data handling.
#include <iostream>
using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // Dummy node to simplify merging logic
        ListNode dummy;
        ListNode* tail = &dummy;

        // Merge the lists while both have elements
        while (list1 && list2) {
            if (list1->val <= list2->val) {
                tail->next = list1;
                list1 = list1->next;
            } else {
                tail->next = list2;
                list2 = list2->next;
            }
            tail = tail->next;
        }

        // Attach the remaining elements (if any)
        if (list1) tail->next = list1;
        if (list2) tail->next = list2;

        return dummy.next;  // Return merged list starting from the first real node
    }
};

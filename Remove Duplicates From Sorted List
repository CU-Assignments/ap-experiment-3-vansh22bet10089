Aim:Operating System-Based Question:
This experiment combines data structures and operating system concepts, focusing on Linked Lists and OS-related problems.
Objective:To understand the implementation and operations of Linked Lists while exploring their applications in Operating System concepts such as memory management, scheduling, and resource allocation.
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        // If list is empty or has only one node
        if (head == nullptr || head->next == nullptr) {
            return head;
        }
        
        // Start from the first node
        ListNode* current = head;
        
        // Traverse the list
        while (current->next != nullptr) {
            // If current node's value equals next node's value
            if (current->val == current->next->val) {
                // Skip the next node
                ListNode* temp = current->next;
                current->next = current->next->next;
                delete temp; // Free memory
            } else {
                // Move to next node only if no deletion
                current = current->next;
            }
        }
        
        return head;
    }
};


Author: Vansh
UID: 22BET10089

Time Complexity: O(n) where n is the number of nodes
Space Complexity: O(1) as we only use constant extra space



 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
